################################################## 
# NexToneGenerateRoutes_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://www.nextone.com/ivms/schema/config
##############################

class ns0:
    targetNamespace = "http://www.nextone.com/ivms/schema/config"

    class configType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/config"
        type = (schema, "configType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.configType_Def.schema
            TClist = [GTD("http://www.nextone.com/ivms/schema/common","credentialsType",lazy=False)(pname="credential", aname="_credential", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.nextone.com/ivms/schema/config","generateRouteConfigType",lazy=False)(pname="generateRouteConfig", aname="_generateRouteConfig", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._credential = None
                    self._generateRouteConfig = None
                    return
            Holder.__name__ = "configType_Holder"
            self.pyclass = Holder

    class reply_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/config"
        type = (schema, "reply")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.reply_Def.schema
            TClist = [ZSI.TC.String(pname="ok", aname="_ok", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.nextone.com/ivms/schema/common","errorType",lazy=False)(pname="error", aname="_error", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ok = None
                    self._error = None
                    return
            Holder.__name__ = "reply_Holder"
            self.pyclass = Holder

    class editConfig_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/config"
        type = (schema, "editConfig")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.editConfig_Def.schema
            TClist = [GTD("http://www.nextone.com/ivms/schema/config","configType",lazy=False)(pname="config", aname="_config", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.nextone.com/ivms/schema/common","errorOptionType",lazy=False)(pname="errorOption", aname="_errorOption", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._config = None
                    self._errorOption = None
                    return
            Holder.__name__ = "editConfig_Holder"
            self.pyclass = Holder

    class getConfig_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/config"
        type = (schema, "getConfig")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getConfig_Def.schema
            TClist = [GTD("http://www.nextone.com/ivms/schema/common","credentialsType",lazy=False)(pname="credential", aname="_credential", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.nextone.com/ivms/schema/config","getRouteFilterType",lazy=False)(pname="getRouteConfig", aname="_getRouteConfig", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._credential = None
                    self._getRouteConfig = None
                    return
            Holder.__name__ = "getConfig_Holder"
            self.pyclass = Holder

    class generateRouteConfigType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/config"
        type = (schema, "generateRouteConfigType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.generateRouteConfigType_Def.schema
            TClist = [ZSI.TC.String(pname="deviceName", aname="_deviceName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="partition", aname="_partition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["applyRoutesToDevice"] = ZSI.TC.Boolean()
                self.attribute_typecode_dict["stickyRoute"] = ZSI.TC.Boolean()
                self.attribute_typecode_dict["modificationUpdateOnly"] = ZSI.TC.Boolean()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._deviceName = None
                    self._partition = None
                    return
            Holder.__name__ = "generateRouteConfigType_Holder"
            self.pyclass = Holder

    class getRouteFilterType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/config"
        type = (schema, "getRouteFilterType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getRouteFilterType_Def.schema
            TClist = [ZSI.TC.String(pname="carrier", aname="_carrier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="partition", aname="_partition", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="region", aname="_region", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._carrier = None
                    self._partition = None
                    self._region = None
                    return
            Holder.__name__ = "getRouteFilterType_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://www.nextone.com/ivms/schema/config)

##############################
# targetNamespace
# http://www.nextone.com/ivms/schema/common
##############################

class ns1:
    targetNamespace = "http://www.nextone.com/ivms/schema/common"

    class credentialsType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/common"
        type = (schema, "credentialsType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.credentialsType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"user"), aname="_user", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"partition"), aname="_partition", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._user = None
                    self._password = None
                    self._partition = None
                    return
            Holder.__name__ = "credentialsType_Holder"
            self.pyclass = Holder

    class ErrorTypes_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/common"
        type = (schema, "ErrorTypes")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ErrorTag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/common"
        type = (schema, "ErrorTag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class dataErrorInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/common"
        type = (schema, "dataErrorInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.dataErrorInfo_Def.schema
            TClist = [ZSI.TCnumbers.Ishort(pname="sequenceNumber", aname="_sequenceNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sequenceNumber = None
                    self._message = None
                    return
            Holder.__name__ = "dataErrorInfo_Holder"
            self.pyclass = Holder

    class errorInfoType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/common"
        type = (schema, "errorInfoType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.errorInfoType_Def.schema
            TClist = [GTD("http://www.nextone.com/ivms/schema/common","dataErrorInfo",lazy=False)(pname="badAttribute", aname="_badAttribute", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.nextone.com/ivms/schema/common","dataErrorInfo",lazy=False)(pname="badElement", aname="_badElement", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.nextone.com/ivms/schema/common","dataErrorInfo",lazy=False)(pname="okElement", aname="_okElement", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.nextone.com/ivms/schema/common","dataErrorInfo",lazy=False)(pname="errElement", aname="_errElement", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.nextone.com/ivms/schema/common","dataErrorInfo",lazy=False)(pname="noopElement", aname="_noopElement", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._badAttribute = []
                    self._badElement = []
                    self._okElement = []
                    self._errElement = []
                    self._noopElement = []
                    return
            Holder.__name__ = "errorInfoType_Holder"
            self.pyclass = Holder

    class ErrorSeverity_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/common"
        type = (schema, "ErrorSeverity")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class errorOptionType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/common"
        type = (schema, "errorOptionType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class errorType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/common"
        type = (schema, "errorType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.errorType_Def.schema
            TClist = [GTD("http://www.nextone.com/ivms/schema/common","ErrorTypes",lazy=False)(pname="errorTtype", aname="_errorTtype", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.nextone.com/ivms/schema/common","ErrorTag",lazy=False)(pname="errorTag", aname="_errorTag", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.nextone.com/ivms/schema/common","ErrorSeverity",lazy=False)(pname="errorSeverity", aname="_errorSeverity", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="erroAppTag", aname="_erroAppTag", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="errorPath", aname="_errorPath", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="errorMessage", aname="_errorMessage", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.nextone.com/ivms/schema/common","errorInfoType",lazy=False)(pname="errorInfo", aname="_errorInfo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._errorTtype = None
                    self._errorTag = None
                    self._errorSeverity = None
                    self._erroAppTag = None
                    self._errorPath = None
                    self._errorMessage = None
                    self._errorInfo = None
                    return
            Holder.__name__ = "errorType_Holder"
            self.pyclass = Holder

    class IP_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/common"
        type = (schema, "IP")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class filterType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/common"
        type = (schema, "filterType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class mediaRoutingType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/common"
        type = (schema, "mediaRoutingType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class webServiceFilter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/common"
        type = (schema, "webServiceFilter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.webServiceFilter_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["type"] = ns1.webServiceFilterType_Def(None)
                self.attribute_typecode_dict["pageIndex"] = ZSI.TCnumbers.IpositiveInteger()
                self.attribute_typecode_dict["pageSize"] = ZSI.TCnumbers.IpositiveInteger()
                self.attribute_typecode_dict["sequenceNumber"] = ZSI.TCnumbers.Ishort()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "webServiceFilter_Holder"
            self.pyclass = Holder

    class webServiceFilterType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/common"
        type = (schema, "webServiceFilterType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class intFilter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/common"
        type = (schema, "intFilter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.intFilter_Def.schema
            TClist = [GTD("http://www.nextone.com/ivms/schema/common","intOperator",lazy=False)(pname="operator", aname="_operator", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._operator = None
                    self._value = None
                    return
            Holder.__name__ = "intFilter_Holder"
            self.pyclass = Holder

    class dateFilter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/common"
        type = (schema, "dateFilter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.dateFilter_Def.schema
            TClist = [GTD("http://www.nextone.com/ivms/schema/common","dateOperator",lazy=False)(pname="operator", aname="_operator", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._operator = None
                    self._value = None
                    return
            Holder.__name__ = "dateFilter_Holder"
            self.pyclass = Holder

    class intOperator_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/common"
        type = (schema, "intOperator")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class dateOperator_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.nextone.com/ivms/schema/common"
        type = (schema, "dateOperator")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class credential_Dec(ElementDeclaration):
        literal = "credential"
        schema = "http://www.nextone.com/ivms/schema/common"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nextone.com/ivms/schema/common","credential")
            kw["aname"] = "_credential"
            if ns1.credentialsType_Def not in ns1.credential_Dec.__bases__:
                bases = list(ns1.credential_Dec.__bases__)
                bases.insert(0, ns1.credentialsType_Def)
                ns1.credential_Dec.__bases__ = tuple(bases)

            ns1.credentialsType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "credential_Dec_Holder"

    class errorOption_Dec(ElementDeclaration):
        literal = "errorOption"
        schema = "http://www.nextone.com/ivms/schema/common"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nextone.com/ivms/schema/common","errorOption")
            kw["aname"] = "_errorOption"
            if ns1.errorOptionType_Def not in ns1.errorOption_Dec.__bases__:
                bases = list(ns1.errorOption_Dec.__bases__)
                bases.insert(0, ns1.errorOptionType_Def)
                ns1.errorOption_Dec.__bases__ = tuple(bases)

            ns1.errorOptionType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "errorOption_Dec_Holder"

    class filter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "filter"
        schema = "http://www.nextone.com/ivms/schema/common"
        def __init__(self, **kw):
            ns = ns1.filter_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.nextone.com/ivms/schema/common","filter")
            kw["aname"] = "_filter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            # attribute handling code
            self.attribute_typecode_dict["type"] = ns1.filterType_Def(None)
            self.attribute_typecode_dict["pageIndex"] = ZSI.TCnumbers.IpositiveInteger()
            self.attribute_typecode_dict["pageSize"] = ZSI.TCnumbers.IpositiveInteger()
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "filter_Holder"
            self.pyclass = Holder

# end class ns1 (tns: http://www.nextone.com/ivms/schema/common)

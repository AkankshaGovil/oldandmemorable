#!/usr/local/narsagent/perl

################################################################################
################################################################################
###
###    logpp
###
###    Log post processor.
###    Copyright (C) 1998-2009, GENBAND Inc.
################################################################################
################################################################################

## Preliminary
use English;

BEGIN
{
    if ($ENV{BASE})
    {
        push(@INC, "$ENV{BASE}/lib/perl5/site_perl");
    }

    my $CurrentVersion = sprintf "%vd", $^V;
    if ($CurrentVersion lt "5.6")
    {
        push(@INC, "/usr/local/narsagent/lib/perl5/site_perl/5.005");
    }
    else
    {
        push(@INC, "/usr/local/narsagent/lib/perl5/site_perl");
    }
}

use File::Tail;
use Getopt::Std;
use XML::Simple;
use Config::Simple;
use Fcntl ':flock'; # import LOCK_* constants
use Data::Dumper;
use Sys::Syslog;
use Net::INET6Glue::INET_is_INET6;
use IO::Socket::INET;
use IO::Handle '_IOLBF';
use IO::File;
use POSIX qw(tmpnam);
use File::Basename;

use NexTone::Logger; # nextone logger module
use NexTone::LM;     # has the license check code
use NexTone::Constants; 
use NexTone::version; 

$mProgName = "GENBAND RSM Agent:logpp";
$mVersion = "$NexTone::version::Version";
$CONFFILE = "nars.cfg";
$PIDFILE = "logpp.pid";
$LOGCONFFILE = "narslog.cfg";
my $LICENSE_GRACE = 3;   # number of times we will check for the license before exiting

our ($opt_v, $opt_h);
getopts "df:ht:v";

if ($opt_v) {
    PrintVersion ();
    exit 0;
}

if ($opt_h) {
    PrintHelp ();
    exit 0;
}

##
## Parameters
##
my $tailparam = $opt_t ? $opt_t : 0;

## Config file
my $ConfigFile = "alarms.conf";

## Log parser
my $debug = $opt_d ? $opt_d : 0;

# find the directory where this perl script is located at
my $mydir = dirname($0);

my $pid;
if ($ENV{NODAEMONIZE} == 0)
{
    $pid = fork;
    exit if $pid;
    die "Could not fork: $!\n" unless defined($pid);
    POSIX::setsid() or die "Can't start a new session: $!\n";
}
sleep 1;
$pid = POSIX::getpid();


my $done = 0;

## Signal Handlers 
$SIG{HUP} = $SIG{CHLD} = 'IGNORE';
#$SIG{TERM}=$SIG{HUP}=$SIG{INT}=sub { my $signame = shift; 
$SIG{TERM}=$SIG{INT}= sub { my $signame = shift;
                            if ($Logger)
                            {
                                $Logger->info("Received SIG$signame");
                            }
                            else
                            {
                                print "Received SIG$signame";
                            }
                            $done = 1;};

# open the pidfile and acquire lock
sysopen(PIDFILE, "$mydir/$PIDFILE", O_WRONLY|O_APPEND|O_CREAT) 
	or die "Could not open PID file: $!\n";
unless (flock(PIDFILE, LOCK_EX|LOCK_NB))
{
    die "Unable to get a lock on PID file (another instance running?): $!\n";
}

# create the pid file
sysseek(PIDFILE, 0, 0);
truncate(PIDFILE, 0);
syswrite(PIDFILE, $pid);

# set up the logger
my $Logger;
if (-f "$mydir/$LOGCONFFILE")
{
    $Logger = NexTone::Logger->new("$mydir/$LOGCONFFILE", $NexTone::Logger::NONE);
}
if (!defined($Logger))
{
    # set up some default logger
    $Logger = NexTone::Logger->new("/tmp/logpp.log", $NexTone::Logger::INFO, {maxSize => 1048576});
}
if (!defined($Logger))
{
    die "Unable to instantiate logger: $NexTone::Logger::errstr";
}
$Logger->info("logpp running from $mydir");

# check for the license
my $lastLicenseCheckTime = 0;  # secs since epoch when we last checked for the license
my $licenseCheckTimes = 0;     # number of times we have checked for the license
while (!$done && licenseNotOk())
{
    $Logger->error("License check failed: $NexTone::LM::errstr");
    sleep 10;
}

my $fname;

my $LogFile = $opt_f ? $opt_f : (($fname = GetFileToTail()) ? $fname : "/var/log/iserver.log");
$Logger->info("logpp is going to tail file  $LogFile");

## Open logging
openlog ( "ALRM", 'cons,pid', "logpp");

## This will tail iserver.log file every 6 seconds.
## reset_tail with ignore_nonexistant migh cause loosing of several seconds of messages
## on MSW logrotate operation
$LogP = File::Tail->new (name        => $LogFile,
                         maxinterval => 6,
                         adjustafter => 1,
                         ignore_nonexistant => 1,
                         reset_tail  => 0,
                         tail        => $tailparam); 
my $lines;
my $rin = '';
my $connected = 0;        # Connected to the server or not
my $buffer_var;            # should not be changed. used by setvbuf
my $sock;
my $count = 0;
my $conf = '';

# Open a connection with the alarm server
# This connection is used to send alarms to the server
# and read the configure file when it changes

##
## Loop forever until the exit signal comes
##
while (!$done) {

    my $line;

    unless ($connected) {
        $sock = OpenClient();
        if ($done)
        {
            next;  # end of while loop
        }
        vec($rin, $sock->fileno, 1) = 1;
    }

    $nfound = 0;
    eval {$nfound = File::Tail::select($rout=$rin,undef,undef,1,$LogP)};
    if ($@)
    {
        $nfound = 0;
    }
    if ($done)
    {
        next;
    }

    # if there is some input from the logfile
    if (!licenseNotOk()) {
    unless ($LogP->predict) {
        my $line = $LogP->read;
        ProcessLine($line, $conf);
            $count++;
            $Logger->debug4("Processed $count lines");# unless ($count % 1000);
        $nfound--;
    }

    # if there is some input from alarmd 
    if (($nfound > 0) && vec($rout, $sock->fileno, 1)) {
        if ($line = $sock->getline) {
            if ($msg = ReadMsg($line)) {
                ProcessMsg($msg);        
            }
        }
        else {     # Connection closed
            vec($rin, $sock->fileno, 1) = 0;
            $sock->close;
            $connected=0;
        }
    }
    }
    else {
    	# the license has expired
        $Logger->error("License check failed: $NexTone::LM::errstr");
	sleep 10;
    }
}
$Logger->info("logpp exiting gracefully");
exit 0;


#################################
# check if we have license to run
#################################
sub licenseNotOk
{
    # only check for the license every 24 hours
    if (!$done && (time - $lastLicenseCheckTime) > (24*60*60))
    {
        unless (NexTone::LM::Agent_Licensed("$mydir/$CONFFILE", \$Logger, 'ESM', 'RAM'))
        {
            if ($lastLicenseCheckTime > 0)
            {
                # if the license was ok when we started up, try once an hour up to
                # 'LICENSE_GRACE' times before giving up
                if ($licenseCheckTimes++ <= $LICENSE_GRACE)
                {
                    # set this guy to check the license after an hour
                    $lastLicenseCheckTime = (time - (23*60*60));

                    $Logger->warn("License check failed: $NexTone::LM::errstr\nWill try " . ($LICENSE_GRACE - $licenseCheckTimes) . " more time(s) before giving up");

                    return 0;  # some problem, but we will try again an hour later
                }
            }
            return 1;  # some problem with the license
        }

        $lastLicenseCheckTime = time;
        $licenseCheckTimes = 0;
    }

    return 0;  # license is ok
}


sub ProcessLine ($ $)
{
    my ($in, $cf) = @_;

    ##
    ## Syslog (iserver.log) format
    ##
    if ( $in =~ m/^(\w+)\s+(\d+)\s+(\d+:\d+:\d+)\s+(\w+)\s+(\w+\[\d+\]):\s+\[ID\s(\d+)\slocal1\.(\w+)\] (.*)$/ )
    {
        my $month = $1;
        my $day = $2;
        my $dtime = $3;
        my $hostname = $4;
        my $gisdesc = $5;
        my $threadid = $6;
        my $debugdesc = $7;
        my $logdesc = $8;

#        print "month=$month, day=$day, time=$dtime, host=$hostname, gis=$gisdesc, $dummy, tid=$threadid, debug=$debugdesc, log=$logdesc \n";

        pMonth ($month);
        pDay ($day);
        pDtime ($dtime);
        pHostname ($hostname);
        pGisdesc ($gisdesc);
        pThreadid ($threadid);
        pDebugdesc ($debugdesc);
        pLogdesc ($logdesc, $in, $cf);

    }
    else
    ### Not in syslog format. So, we'll assume that it is a freestyle
    ### format such as iserverout.log, for instance.
    ### We'll still try to process it as a regular log.
    {
        pLogdesc ($in, $in, $cf);
    }
}


sub pMonth ($)
{
    my ($month) = @_;
}

sub pDay ($)
{
    my ($day) = @_;

}

sub pDtime ($)
{
    my ($dtime) = @_;
}

sub pHostname ($)
{
    my ($hostname) = @_;
}


sub pGisdesc ($)
{
    my ($gisdesc) = @_;
}

sub pThreadid ($)
{
    my ($threadid) = @_;
}

sub pDebugdesc ($)
{
    my ($debugdesc) = @_;
}

sub pLogdesc ($ $ $)
{
    my ($logdesc, $line, $cnf) = @_;

    my $i = $cnf;
    my $j;
    foreach $j (0..$#$i)
    {
        $qual      = $i->[$j]{Type};
        $condition = $i->[$j]{XMLConf}{EQUALS}[0]->{'content'};
	  	$evName    = $i->[$j]{XMLConf}{NAME}[0]->{'content'};
        $alarmid   = $i->[$j]{AlarmId};

        ## Clean up what we read.
        for ($condition)
        {
            s/^\s+\"// ; 
            s/\"\s+$// ; 
        }
		$condition = quotemeta($condition);

		$Logger->debug2("Logdesc: quals=" . $qual . ", condition=" . $condition . ", evname=" . $evName . ", alarmid=" . $alarmid);

        if ($qual =~ m/log/i)
        {
            if ($logdesc =~ /$condition/i)
            {
                $Logger->debug1("Condition match: $condition, $logdesc");
                my ($month, $day, $dtime, $host) = GetWhen ($line);
                SendAlarm($alarmid, $logdesc, $line, $host);
            }
        }
    }
}


sub DoActionsLogdesc2 ($ $ $ $)
{
    my ($log, $line, $infer, $actionref) = @_;
    my $date = `date`;
    chomp ($date);
    my $message;

$message = <<eEOF;

$infer

was inferred from:
$log

------------------------------------------
More detailed information is given below:
$line

***********************************************************************
Message generated by $mProgName, $mVersion on $date
***********************************************************************
eEOF


    my $NotifyFile = './mail.pl -s AlarmReport!';
    my $MessageFile = "tout";
    open (T, "> $MessageFile") or die "unable to open file";

    print T "$message\n";

    close (T);

    my $j;

    for $j (0..$#$actionref)
    {
        for (@$actionref[$j])
        {
            s/^\s+\"// ; 
            s/\"\s+$// ; 
        }
        $Logger->debug1("Notification[$j]....@$actionref[$j]");
        syslog ('Debug', "Notification[$j]....@$actionref[$j] \n");
        system ("@$actionref[$j]");

    }

}

##
## Old/original routine
##
sub DoActionsLogdesc ($ $ $)
{
    my ($log, $line, $infer, $cnf) = @_;
    my $date = `date`;
    chomp ($date);


my $message;

$message = <<eEOF;

$infer

was inferred from:
$log

------------------------------------------
More detailed information is given below:
$line

***********************************************************************
Message generated by $mProgName, $mVersion on $date
***********************************************************************
eEOF


    my $NotifyFile = './mail.pl -s AlarmReport!';
    my $MessageFile = "tout";
    open (T, "> $MessageFile") or die "unable to open file";

    print T "$message\n";

    close (T);

    $Logger->debug1("Doing notification...");
    system ("$NotifyFile $MessageFile");

    ## second notification
    $NotifyFile = './phone.pl';
    system ("$NotifyFile");

}

sub GetWhen ($)
{
    my ($in) = @_;
    my $month;
    my $day;
    my $dtime;
    my $hostname;

    if ( $in =~ m/^(\w+)\s+(\d+)\s+(\d+:\d+:\d+)\s+(\w+)\s+(\w+\[\d+\]):\s+\[ID\s(\d+)\slocal1\.(\w+)\] (.*)$/ )
    {
        $month = $1;
        $day = $2;
        $dtime = $3;
        $hostname = $4;
        my $gisdesc = $5;
        my $threadid = $6;
        my $debugdesc = $7;
        my $logdesc = $8;

        return ($month, $day, $dtime, $hostname);
    }
    else
    {
        ($day, $month) = (localtime)[3,4];
        $month += 1;    ## Convert from Unix month to regular month
        $dtime = sprintf("%2d:%2d", (localtime)[2,1]);
        $hostname = `hostname`;
        chop $hostname;

        return ($month, $day, $dtime, $hostname);
    }

}

sub PrintHelp ()
{
    print <<eEOF
$mProgName, $mVersion
Options are:
<logfile>      - scan <logfile>
-h                - prints this
-d                - switch debug on
-v                - prints out version
eEOF
;
}

sub PrintVersion () {
    print "$mProgName, $mVersion \n";
}

##
## Parses given config file and returns hashref pointing to data.
##
sub ParseConfigFile ($) {
    my ($arg) = @_;

	unless ($arg)
	{
		$Logger->error("ParseConfig called with invalid input");
	}

    ## Basic engine for doing work.
    ##
    my $xs = new XML::Simple();

    ## Forcearray changes the whole paradigm.
    my $ref = $xs->XMLin( $arg, forcearray => 1 );

###    For debug only.
###    print Dumper ($ref);

    return $ref;
}

################################################################################
# Get the server name from the nars.cfg file 
################################################################################
sub GetServerName() {
    my $line;

    open (NARS_CFG, '<nars.cfg')
        or die "Fatal:: Cannot open nars.cfg to read server name - $!";

    while ($line = <NARS_CFG>) {
        if (($line !~ /^#/) && ($line =~ /host=(\S+)/)) {
            close(NARS_CFG);
            return $1;
        }
    }

    close(NARS_CFG);
    return '';
}

################################################################################
# Open a connection to the iVMS server
# Alarms are sent to the alarmd server through this connection
# Notifications that the conf file has changes are also made
# through this file
################################################################################
sub OpenClient() {
    my ($host, $sock);

    $host = GetServerName();

    my $concount = 0;
    do {
        $sock = IO::Socket::INET->new('PeerAddr' =>    $host,
                                      'PeerPort' => 6917,
                                      'Timeout' => 10,
                                      'Proto' => 'tcp');

        if ($sock) {
            eval {$sock->setvbuf($buffer_var, _IOLBF, 1024)
                or $Logger->warn("setvbuf on socked failed: $!")};
        }
        else
        {
            if (++$concount%10 == 1)
            {
                $Logger->warn("Cannot open socket: $!");
            }
            sleep(10);
        }

        if (licenseNotOk())
        {
            $Logger->error("License check failed: $NexTone::LM::errstr");
        }
    } until ($done || $sock);

    if ($sock)
    {
        $connected = 1;
        $conf = ReadConf();
    }
    return $sock;
}

################################################################################
# ReadMsg composes a message when you are reading line by line and returns it 
################################################################################
sub ReadMsg ($) {
    my ($line) = @_;
    my $msg;

    if ($line =~ /^START_MSG/) {
        $lines = [];        
    }
    elsif ($line =~ /^END_MSG/) {
        $msg = $lines;
        undef $lines;
        return $msg    ;
    }
    elsif (defined $lines) {
        push(@$lines, $line);    
    }
    
    return 0;
}

################################################################################
# Message is an array of lines which contains either predetermined directives 
# or perl statements.
# Anything that does not resolve to a predetermined directive is considered a 
# perl statement.
################################################################################
sub ProcessMsg ($) {
    my ($msg) = @_;

    foreach $line (@$msg) {
        if ($line =~ /^READ_CONF_FILE$/) {
            $conf = ReadConf();
			$Logger->info("Received read config message");
        }
        else {
            eval($line) or $Logger->error("Error executing - $line: $!");
        }
    }
}

################################################################################
# ReadConf() is a function which reads all the alarms from the database
# and returns an arrayref of all parsed alarms 
################################################################################
sub ReadConf() {
my @alarm_login = GetAlarmLoginInfo ();
    unless(@alarm_login)
    {
    	$Logger->error("logpp::ReadConf() Couldn't obtain the agent servlet info");
    	return undef;
    }
    push(@alarm_login, \$Logger);
    my $concount = 0;
    my $Poster = undef;
    while (!$done)
    {
    eval {$Poster = NexTone::Poster->new(@alarm_login);};
    if ($@)
    {
           if (++$concount%10 == 1)
            {
 	            $Logger->error("Unable to connect to the agent servlet for obtaining alarms ,$@, will try again");
	        }
            sleep(10);
     }
     else 
     {
           	last;
     }
            
   }
   if ($done)
 	{
       	return undef;
    }
    my $postData="";
    my $blob = $Poster->post($postData);
	if(!defined($blob)){
		$Logger->error("Unable to obtain alarm info");
		return undef;
	}
    my $x = &parseRows($blob);
    
    
    return $x;
}


sub SendAlarm($ $ $ $) {
    my $tryCount = 1;
    
    do
   {
    ($alarmid, $logdesc, $line, $host) = @_;
    my $hdr = "START_MSG\n";
    my $ftr = "END_MSG\n";
    
    unless ($connected) {
	$Logger->error("Not connected to server. Trying to connect again.");
	$sock = OpenClient();
        #return 0;
    }

    my $snd = "ALARM: $alarmid\n".
              "LOGDESC: $logdesc\n".
              "LINE: $line\n".
              "HOST: $host\n";
    
    $Logger->info("Sending alarm " . $snd . " to server");
    
    $rc = $sock->print("$hdr"."$snd"."$ftr");            
    if (!$rc) {
        $Logger->error("Error sending data to server: " . $sock->error());
        vec($rin, $sock->fileno, 1) = 0;
        $sock->close;
        $connected=0;
	$tryCount++;
     }    
     else
     {
	
	return $rc;
     }
   } until ($tryCount>2);
   if($connected = 0){
	$Logger->error("Not connected to server. Cannot send alarm - $infer");
    }    
    return $rc;
}


################################################################################
# Get the license servlet url name from the $conffile file
################################################################################
sub GetAlarmLoginInfo ($) {
    # read the nars config file
    my $config;
    if (-f "$mydir/$CONFFILE" && -T "$mydir/$CONFFILE") {
        $config = new Config::Simple(filename=>"$CONFFILE", mode=>O_RDONLY);
    } else {
        die("Cannot read config file $mydir/$CONFFILE");
    }


    my %cfghash = $config->param_hash();

    # if the password is just a '.', it means password is empty
    $cfghash{'default.pass'} = "" if ($cfghash{'default.pass'} eq '.');
	my $alarmUrl = GetAlarmUrl($cfghash{'default.host'});
    return ($cfghash{'default.user'}, $cfghash{'default.pass'}, $alarmUrl);
}






################################################################################
# Get the server name from the $CONFFILE file
################################################################################
sub GetDBILogin() {
    # read the nars config file
    my $config;

    if (-f "$mydir/$CONFFILE" && -T "$mydir/$CONFFILE") {
        $config = new Config::Simple(filename=>"$CONFFILE", mode=>O_RDONLY);
    } else {
        die("Cannot read config file $mydir/$CONFFILE");
    }

    my %cfghash = $config->param_hash();

    # if the password is just a '.', it means password is empty
    $cfghash{'default.dbpass'} = "" if ($cfghash{'default.dbpass'} eq '.');

    return ($cfghash{'default.dburl'}, $cfghash{'default.dbuser'}, $cfghash{'default.dbpass'}, {PrintError => 1, RaiseError => 1, AutoCommit => 1});
}

################################################################################
# Get the file name to tail
################################################################################
sub GetFileToTail() {
    # read the nars config file
    my $config;

    if (-f "$mydir/$CONFFILE" && -T "$mydir/$CONFFILE") {
        $config = new Config::Simple(filename=>"$CONFFILE", mode=>O_RDONLY);
    } else {
        die("Cannot read config file $mydir/$CONFFILE");
    }

    my %cfghash = $config->param_hash();

    if ($cfghash{'default.logppfile'}) {
		return $cfghash{'default.logppfile'};
	}
	else {
		my $logpath = getFnameFromSyslogConf();
		return $logpath;
	}
}

sub GetAlarmUrl ($){
	my($host) = @_;
	my $url =  $NexTone::Constants::ALARM_URL_PREFIX . $host . $NexTone::Constants::ALARM_URL_SUFFIX . "?" . $NexTone::Constants::ALARM_ACTION_CLASS;
	if (is_ipv6($host)) {
	    $url =  $NexTone::Constants::ALARM_URL_PREFIX . "[" . $host . "]". $NexTone::Constants::ALARM_URL_SUFFIX . "?" . $NexTone::Constants::ALARM_ACTION_CLASS;
    }
	$Logger->debug2("logpp::GetAlarmUrl() host[$host] url = $url");
	return $url;
}

sub parseRows ($){
        my($data) = @_;
    	my $x = [];
    	my $i = 0;
		$Logger->info("Received AlarmMessage $data");
		my $xsl = new XML::Simple();
		my $am = eval { $xsl->XMLin($data, KeyAttr => {}, ForceArray => 1, ForceContent => 1);};
		if($@){
			$Logger->error("logpp : parseRows() Error Parsing Alarm Message[$data]");
		  	return $x;
		}	
		if (!exists $am->{'alarms'}){
			$Logger->debug2("logpp : parseRows() alarms element doesn't exist ");
			return $x;
		}
		if (!exists $am->{'alarms'}[0]->{'alarm'}){
			$Logger->debug2("logpp : parseRows() alarm element doesn't exist ");
			return $x;
		}
		my $alarms = $am->{'alarms'}[0]->{'alarm'};
    	my @rows = @$alarms;
    	foreach $row(@rows)
    	{
			my $type = $row->{'type'}[0]{'content'}; 
			my $alarmId = $row->{'id'}[0]{'content'};
			my $evConf = $row->{'EV'}[0];
	   		my %row = ('Type' => $type, 'AlarmId' => $alarmId,  'XMLConf' => $evConf);
			push (@$x, \%row);    		
        }
    	return $x;
}

sub getFnameFromSyslogConf() {

	if (-f '/etc/syslog.conf') {
		($token) ='local1.err';	
		open(FILE, '/etc/syslog.conf');	
		while(<FILE>) {
			next if (/^#/);
			last if (/$token/);
		}
		close(FILE);
		@allLine = split; 
		my $logpath = $allLine[$#allLine];
		$logpath=~s/^-//;
	 	$Logger->debug2("The log path read is ".$logpath);    
		return $logpath;
	} elsif ( -f '/etc/syslog-ng/syslog-ng.conf' )  {
		$token='destination iserverlogging';
  		my $logpath = "";
		open(FILE, '/etc/syslog-ng/syslog-ng.conf');	
		while(my $line=<FILE>) {
			if ($line=~m/^$token/) {
			  $logpath=$line;	
			}
			
		}
		close(FILE);		
		
		my $startindex = rindex ($logpath,"file");
		$logpath =substr($logpath,$startindex);
		my $endindex = rindex ($logpath,"\");");
		my $substrlen = $endindex -$startindex;
		$logpath =substr ($logpath,0,$substrlen);
		$logpath=~s/file\("//;
		$logpath=~s/"\);//;	
		$Logger->debug2("The log path read is ".$logpath);
		return $logpath;
	} else {
		return "" ;
	}	
}

sub is_ipv6 
{ 
  my($ipv6) = @_; 

  return $ipv6 =~ /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/; 
} 

END {
$sock->close if (defined $sock);
close(PIDFILE);
unlink("$mydir/$PIDFILE");
if ($Logger)
{
    $Logger->info("logpp exited");
}
}

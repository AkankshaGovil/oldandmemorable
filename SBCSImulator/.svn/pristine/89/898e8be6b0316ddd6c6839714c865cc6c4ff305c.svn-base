#!/usr/local/narsagent/perl
# file monitor.pl

#use strict;

BEGIN
{
    if ($ENV{BASE})
    {
        push(@INC, "$ENV{BASE}/lib/perl5/site_perl");
    }

    my $CurrentVersion = sprintf "%vd", $^V;
    if ($CurrentVersion lt "5.6")
    {
        push(@INC, "/usr/local/narsagent/lib/perl5/site_perl/5.005");
    }
    else
    {
        push(@INC, "/usr/local/narsagent/lib/perl5/site_perl");
    }
}

#use DBI;
use Config::Simple;
use File::Basename;
use IO::File;

use NexTone::Logger; # nextone logger module
use NexTone::Trapposter; # nextone snmp trap

my $mydir        = "/usr/local/narsagent";
my $MONITOR_FILE = "monitorInfo";
my $config;
my $CONFFILE = "nars.cfg";
my $LOGCONFFILE ="narslog.cfg";

if (defined($ARGV[0]) && $ARGV[0] eq "-i" && defined($ARGV[1]))
{
	$mydir = $ARGV[1];
}

if ( -f "$mydir/$CONFFILE" && -T "$mydir/$CONFFILE")
{
	$config =new Config::Simple( filename => "$mydir/$CONFFILE", mode => O_RDONLY );
}
else
{
	print "Cannot read config file $mydir/$CONFFILE \n";
	exit 0;
}


# set up the logger
my $Logger;
if (-f "$mydir/$LOGCONFFILE")
{
    $Logger = NexTone::Logger->new("$mydir/$LOGCONFFILE");
} else {
    # set up some default logger
    $Logger = NexTone::Logger->new("/tmp/$LOGCONFFILE", $NexTone::Logger::INFO, {maxSize => 1048576});
}
if (! defined($Logger))
{
    print "Cannot instantiate logger \n";
    exit 0;
}

my %cfghash = $config->param_hash();
my $cdr_dir = $cfghash{'default.cdrpath'};

#cdr server status
my $state_yes = "ProcessRunningFine=YES";
my $state_no  = "ProcessRunningFine=NO";

#error code
my $code_run = "000";
my $code_hung = "003";
my $code_notrun = "004";
my $code_readerror = "006";

#state code of cdr server ---0 running, 1 error
my $state_cdrserver_running = "0";
my $state_cdrserver_error = "1";

my $sum_last;
my $sum_cdt;
my $state;
my $sum_last_new;
my $sum_cdt_new;
my $cdt_size;

my $cdrPid;
my $runningPid;

if ( -e "$mydir/nars.pid" ) {
	$cdrPid = `head -1 $mydir/nars.pid`;
	chomp($cdrPid);
	$runningPid = `ps -p "$cdrPid"|grep -v PID`;
}

$sum_last_new = `cksum $mydir/nars.lastseen`;
$sum_cdt_new  = `cksum $cdr_dir/*.CDT`;
chomp($sum_last_new);
chomp($sum_cdt_new);

#check1, the file exist?
if ( -e "$mydir/$MONITOR_FILE" ) {
}else {

	#file not exist
	writeFile( $state_yes, $sum_last_new, $sum_cdt_new );
	exit 0;
}

if ( open( FILE, "$mydir/$MONITOR_FILE" ) ) {
	@array    = <FILE>;
	$state    = $array[0];
	$sum_last = $array[1];
	$sum_cdt  = $array[2];
	close(FILE);

	chomp($state);
	chomp($sum_last);
	chomp($sum_cdt);

	#check2, error in reading monitor file
	if ( $state ne $state_yes && $state ne $state_no ) {
		##send trap
		sendTrap($state_no, $code_readerror);
		##log event
		$Logger->info("Error while reading info from file:$MONITOR_FILE");
		writeFile( $state_no, $sum_last_new, $sum_cdt_new );
		exit 0;
	}

	#check3, cdrserver process still running
	if ( !$runningPid ) {
		if ( $state eq $state_yes ) {
			##send trap
			sendTrap($state_no, $code_notrun);
		}
		else {
			###log
			$Logger->info("cdrserver not running");
		}
		
		writeFile( $state_no, $sum_last_new, $sum_cdt_new );
		unregist();
		exit 0;
	}

	#check4, is any change in lastseen
	if ( $sum_last_new ne $sum_last ) {
		if ( $state eq $state_no ) {
			##send trap
			sendTrap($state_yes, $code_run);
		}
		writeFile( $state_yes, $sum_last_new, $sum_cdt_new );
		exit 0;
	}
	
	## count the size of cdt file
	$cdt_size=$sum_cdt_new;
	if(index($cdt_size," ")>0){
        $cdt_size=substr($cdt_size, index($cdt_size, " ")+1);
        if(index($cdt_size," ")>0){
                $cdt_size=substr($cdt_size,0,index($cdt_size," "));
        }
	}

	#check5, is any change in cdt
	if ( $sum_cdt_new eq $sum_cdt || $cdt_size eq "0") {
		###log the event in narsagent.log that no new CDRs generated by SBC
		$Logger->info("No new CDRs generated by SBC");
		writeFile( $state, $sum_last_new, $sum_cdt_new );
	}
	else {
		if ( $state eq $state_no ) {
			###log event in log, that no CDRs send by cdrserver
			$Logger->info("No new CDRs sent by cdrserver");
		}
		else {
			###send a snmp trap(no)
			sendTrap($state_no, $code_hung);
		}
		writeFile( $state_no, $sum_last_new, $sum_cdt_new );
	}
}else {
	#error in reading file
	##send trap
	sendTrap($state_no, $code_readerror);

	##log event
	$Logger->info("Error while reading info from file:$MONITOR_FILE");
	writeFile( $state_no, $sum_last_new, $sum_cdt_new );
	exit 0;
}


################################################
##unregist monitor from cron service
################################################
sub unregist() {

	#unregist monitor
	my $tmpCronFile         = "oldcrontab";
	my $CronJobSearchString = "$mydir/narsagent";

	# remove the cronjob entry from the cron file
	my $status = system("crontab -l | grep -v \"$CronJobSearchString\" >$tmpCronFile");

	# remove comments from temporary file
	system(" sed -i \'\/DO NOT EDIT THIS FILE - edit the master and reinstall\/d\' $tmpCronFile");
	system(" sed -i '/installed on/d' $tmpCronFile");
	system(" sed -i '/Cron version/d' $tmpCronFile");

	# reload the crontab
	$status = system(" crontab $tmpCronFile");
	$status = system("/etc/init.d/cron reload > /dev/null 2>&1 & ");

	#remove the temporary file created
	system("rm -f $tmpCronFile");
}


################################################
## send snmp trap
################################################
sub sendTrap() {
	my @arg = @_;
	my $state_cdrserver = $arg[0];
	my $errcode = $arg[1];

	if($arg[0] eq $state_no){
		$state_cdrserver = $state_cdrserver_error;
	}
	else{
		$state_cdrserver = $state_cdrserver_running;
	}
	
	my $monitorinfo = `cat "$mydir/$MONITOR_FILE"`;
	$Logger->info("the last: monitorinfo: $monitorinfo");
	$Logger->info("now: $sum_last_new, $sum_cdt_new");
	
	my $trap = NexTone::Trapposter->new();
	$trap->sendAndLogTrap($state_cdrserver, $errcode);
	
}


##############################################################################
## write cdr server status, checksum of nars.lastseen, check sum of cdt
##############################################################################
sub writeFile() {
	my @arg = @_;
	my $state_cdr = $arg[0];
	my $ck_seen   = $arg[1];
	my $ck_cdt    = $arg[2];

	# open the pidfile and acquire lock
	unless ( sysopen( PIDFILE, "$mydir/$MONITOR_FILE", O_WRONLY | O_APPEND | O_CREAT )){
		$Logger->info("Could not open Monitor file:$MONITOR_FILE $!");
	  	die "Could not open Monitor file: $!\n";
	}

	sysseek( PIDFILE, 0, 0 );
	truncate( PIDFILE, 0 );
	syswrite( PIDFILE, "$state_cdr\n$ck_seen\n$ck_cdt" );
	close(PIDFILE);
}

